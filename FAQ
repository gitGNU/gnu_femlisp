# -*- mode: text; -*-

Femlisp FAQ
-----------

* INSTALLATION AND GETTING STARTED

1. Q: On which computers is Femlisp available?  Does Femlisp work
   with other CL environments than CMUCL?

   A: This depends mostly on Matlisp.  Matlisp works with CMUCL and ACL
   under Linux and Solaris.  If Matlisp should work with other CL
   environments, it should be easy to port Femlisp.  An alternative is to
   write a Matlisp replacement which is possible because Femlisp uses only
   a fraction of its functionality.

2. Q: What manuals and other introductory material are available?

   A: There is a short description of Femlisp in the doc-directory.
   Additionally, you should know how to get documentation of functions and
   variables out of your Lisp environment.  Hopefully, somewhat later a
   better manual will be available.

3. Q: What is the best way to get started?

   A: Work through the demos to see what is possible.  The set up an own
   directory for yourself and try something like (taken from
   cdr/model-problem.lisp):

  (let* ((dim 2) (order 1) (level 2)
	 (problem (laplace-test-problem dim))
	 (h-mesh (uniformly-refined-hierarchical-mesh (domain problem) level))
	 (fedisc (lagrange-fe order)))
    (multiple-value-bind (matrix rhs)
	(discretize-globally problem h-mesh fedisc)
      (m* (sparse-ldu matrix) rhs)))

  Plot the result.  Then try to build your own problem and try again.  Try
  switching to the multigrid solver.  Maybe look at the (somewhat old) file
  cfd-seminar-2002.lisp.  Then look at how the demos are built.

* MESH MANAGEMENT

1. Q: Which types of cells are available?

   A: Femlisp has simplices and simplex-product cells.  I.e. it has the
   interval in 1D, triangle and square in 2D, tetrahedron, prism, and cube
   in 3D, and so on for higher dimensions.  It does not have pyramids.  It
   would be rather easy to incorporate also those in the mesh module, but
   it is not clear how the construction does look like in higher
   dimensions.


* LINEAR ALGEBRA

1. Q: Why is Femlisp's linear algebra so slow?  Is this necessary?

   A: Because it is based on hash-tables indexed by mesh-entities like
   vertices, lines, ..., and each entry is again a block consisting of a
   Matlisp matrix object (or something else).  This means that generic
   functions have to be used for handling those entries.  Of course, the
   overhead for generic functions and hash-table is large, especially
   in the case of scalar equations with low-order discretizations.  Also
   the FFI is slow.

2. Q: Is it possible to improve the linear algebra?

   A: It is possible to improve it by replacing the data structure by a
   more efficient array-based one where the operations are also specialized
   depending on the type of their entries.  I have started working on this
   and preliminary results look promising.  The result should be a
   matrix-vector data structure having most of the flexibility of the
   current approach while being as efficient as the usual CRS scheme.

3. Q: How does Femlisp's compare with other programs wrt speed?

   A: You have to distinguish between speed of execution and speed of
   development.  The speed of program development in Common Lisp cannot be
   beaten by statically typed languages like C++ or Fortran and differs
   often by an order of magnitude.  Concerning execution speed, I admit
   that Femlisp is too slow at the moment, but I think that this situation
   will soon improve such that it will be in the same speed range for most
   problems.


* PROBLEMS

1. Q: How can I solve nonlinear problems?

   A: It is possible to assemble problems with coefficients depending on
   the current solution.  This could then be trivially used inside a
   fixed-point iteration.  With the help of an iteration subclass, this can
   be easily integrated with Femlisp.

2. Q: How can I solve time-dependent problems?

   A: At the moment, the easiest way is to set up your time-stepping scheme
   yourself by assembling a delta-t dependent term in matrix and right-hand
   side.  In this way, simple time-stepping schemes are possible.  More
   elaborate choices and adaptivity require more work, of course.

* DISCRETIZATION

1. Q: Is it possible to handle problems with more than one right-hand side
   with different choice of essential boundary?
   
   A: For the moment, no.  This feature uses that within the right-hand
   side and solution vectors every data block is a Matlisp matrix.  Changes
   in the location of essential boundary would require slightly different
   matrices which does not fit into this pattern.

* SOLVERS

1. Q: Is there a BiCGStab or GMRES iteration available?

   A: No, not yet.  It would be really useful and not too difficult, if
   someone would extend the file iterations/krylow.lisp in this direction.

2. Q: Wouldn't it be useful to include also an interface to sparse direct
   solvers like SuperLU?

   A: Yes, but I do not have the time to do it now.

3. Q: When will local multigrid work for systems?

   A: Rather soon.  Almost everything necessary is available, but at the
   moment I do not have time to put it together.

* PARALLELIZATION

1. Q: What about parallelization?

   A: This has not yet been started.  Probably, I will first parallelize
   computationally intensive parts like mesh management, assembly, and
   iterative solvers on MISD architectures.  Parallelization for MIMD
   architectures is also possible using MPI, but would require a major
   restructuring.
