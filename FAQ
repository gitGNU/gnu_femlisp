# -*- mode: text; -*-

Femlisp FAQ
-----------

* A: INSTALLATION AND GETTING STARTED

1. Q: On which architectures is Femlisp available?

   A: See the file INSTALL.

2. Q: What manuals and other introductory material are available?

   A: There is a short description of Femlisp in the doc-directory,
   unfortunately it is not really up-to-date anymore.  Additionally, you
   should know how to get documentation of functions and variables out of
   your Lisp environment.  I plan to have a real manual in summer 2004.

3. Q: What is the best way to get started?

   A: Work through the demos to see what is possible.  The set up an own
   directory for yourself and try something like:

     (solve (cdr-problem dim) :success-if '(> :time 20.0))

   Plot the result using 
     (plot (getbb *result* :solution))

  Try to find out what SOLVE is doing here, then look at how the demos are
  done.  Try to modify the above problem by giving it a different
  right-hand side.

* B: MESH MANAGEMENT

1. Q: Which types of cells are available?

   A: Femlisp has simplices and simplex-product cells.  I.e. it has the
   interval in 1D, triangle and square in 2D, tetrahedron, prism, and cube
   in 3D, and so on for higher dimensions.  It does not have pyramids.  It
   would be rather easy to incorporate also those in the mesh module, but
   it is not clear to me how the construction does look like in higher
   dimensions.


* C: LINEAR ALGEBRA

1. Q: Why is Femlisp's linear algebra so slow?  Is this necessary?

   A: Because the sparse-matrix implementation is based on hash-tables
   indexed by mesh-entities like vertices, lines, ..., and each entry is
   again a block consisting of a matrix object.  This means that generic
   functions have to be used for handling those entries.  Of course, the
   overhead for generic functions and hash-table is large, especially in
   the case of scalar equations with low-order discretizations.

2. Q: Is it possible to improve the linear algebra?

   A: It is possible to improve it by replacing the data structure by a
   more efficient array-based one where the operations are also specialized
   depending on the type of their entries.  I have started working on this
   and preliminary results look promising.  The result should be a
   matrix-vector data structure having most of the flexibility of the
   current approach while being as efficient as the usual CRS scheme.

3. Q: How does Femlisp's compare with other programs wrt speed?

   A: You have to distinguish between speed of execution and speed of
   development.  The speed of program development in Common Lisp cannot be
   beaten by statically typed languages like C++ or Fortran and differs
   often by an order of magnitude.  Concerning execution speed, I admit
   that Femlisp is still rather slow at the moment, but I hope that this
   situation will soon improve.


* D: PROBLEMS

1. Q: How can I solve nonlinear problems?

   A: It is possible to assemble problems with coefficients depending on
   the current solution.  This could then be trivially used inside a
   fixed-point iteration.  Using the <iteration> class, this can be easily
   integrated with Femlisp.

2. Q: How can I solve time-dependent problems?

   A: At the moment, the easiest way is to set up your time-stepping scheme
   yourself by assembling a delta-t dependent term in matrix and right-hand
   side.  In this way, simple time-stepping schemes are possible.  More
   elaborate choices and adaptivity require more work, of course.

* E: DISCRETIZATION

1. Q: Is it possible to handle problems with more than one right-hand side
   with different choice of essential boundary?
   
   A: For the moment, no.  This feature uses that within the right-hand
   side and solution vectors every data block is a Matlisp matrix.  Changes
   in the location of essential boundary would require slightly different
   matrices which does not fit into this pattern.

* F: SOLVERS

1. Q: Is there a BiCGStab or GMRES iteration available?

   A: No, not yet.  It would be really useful and not difficult, if someone
   would extend the file iterations/krylow.lisp in this direction.

2. Q: Wouldn't it be useful to include also an interface to sparse direct
   solvers like SuperLU?

   A: Yes, but I do not have the time to do it now.

3. Q: When will local multigrid work for systems?

   A: Rather soon.  Almost everything necessary is available, but at the
   moment I do not have time to put it together.

* G: PARALLELIZATION

1. Q: What about parallelization?

   A: This has not yet been started.  Probably, I will first parallelize
   computationally intensive parts like mesh management, assembly, and
   iterative solvers on MISD architectures.  Parallelization for MIMD
   architectures is also possible using MPI or PVM, but would require a
   major restructuring.

* H: GENERAL

1. Q: Why is Femlisp slow?

   A: There are several answers.  The most important is that it is working
   with unstructured meshes.  Comparable Fortran/C/C++ libraries are also
   slow compared with libraries written for structured meshes.  Second,
   Femlisp still has to be optimized at several places, the most important
   being its linear algebra, see above.  This will change in the near
   future.
