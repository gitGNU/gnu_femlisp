@node First steps, Programming techniques, Installation, Top
@chapter First steps

@menu
* Demos::                       
* Solving problems::            
* Plotting::                    
* Common Lisp environment::     
@end menu

@node Demos, Solving problems, First steps, First steps
@section Demos

Start @femlisp{} and look at the demos by typing @kbd{(femlisp-demo)}
(followed by @kbd{RETURN}) at the CL prompt (do not forget the
parentheses!).  You drop out of the demos by typing @kbd{quit} (without
parentheses) at the demo prompt, and you can exit @femlisp{} by typing
@kbd{(quit)} at the CL prompt.

@node Solving problems, Plotting, Demos, First steps
@section Solving problems

This section discusses how to solve several standard problems with
@femlisp{}.  It might be useful to read the following section on how to
use your Common Lisp environment before trying these examples.

@menu
* Stationary diffusion problem::  
* Elasticity problem::          
* Navier-Stokes problem::       
* Heat equation::               
@end menu

@node Stationary diffusion problem, Elasticity problem, Solving problems, Solving problems
@subsection Stationary diffusion problem

Assume that we want to solve the Poisson equation @math{\Delta u(x,y)
= f(x,y)} on the unit square @math{\Omega=(0,1)^2} with right-hand
side @math{f(x,y)=e^{x+y}} and Dirichlet boundary conditions
@math{u(x,y)=0} for @math{(x,y) \in \partial \Omega}.  The following
command solves this equation approximately on a uniformly refined mesh
using as termination criterion that the time for approximating the
solution has increased beyond 20 seconds.

@lisp
(defparameter *result*
     (solve
      (blackboard
       :problem
       (cdr-model-problem (n-cube-domain 2)
                          :source #'(lambda (x) #I(exp(x[0]+x[1]))))
       :success-if '(> :time 20))))
@end lisp

The result of the call to @function{solve} is a blackboard which we
saved in the global variable @var{*result*} for later reference.  We
can extract items from there using the function @code{getbb}, e.g. for
plotting the solution:
@lisp
(plot (getbb *result* :solution))
@end lisp

@node Elasticity problem, Navier-Stokes problem, Stationary diffusion problem, Solving problems
@subsection Elasticity problem

Assume that we want to solve an elasticity problem with an isotropic
elasticity tensor determined by the Lame parameters
@math{\lambda=\mu=1} on the unit square @math{\Omega=(0,1)^2} with
right-hand side @math{\vec{f}(x,y)\equiv (1,0)^t} and Dirichlet
boundary conditions @math{\vec{u}(x,y)=0} for @math{(x,y) \in \partial
\Omega}.  The following command solves this equation approximately on
a uniformly refined mesh using as termination criterion that the time
for approximating the solution has increased beyond 20 seconds.

@lisp
(let* ((problem
        (standard-elasticity-problem
         (n-cube-domain 2) :lambda 1.0 :mu 1.0
         :force (constant-coefficient (vector #m(1.0) #m(0.0)))))
       (blackboard
        (blackboard :problem problem :output t :success-if '(> :time 20.0))))
  (solve blackboard)
  (plot (getbb blackboard :solution) :component 0)
  (plot (getbb blackboard :solution) :component 1))
@end lisp

@node Navier-Stokes problem, Heat equation, Elasticity problem, Solving problems
@subsection Navier-Stokes problem

The following sequence is a short excerpt from the Driven cavity demo
in @file{femlisp/src/applications/navier-stokes/driven-cavity.lisp}.
It solves the two-dimensional Driven cavity problem with Reynolds
number 10.  During the approximation the approximation of the velocity
components at the midpoint @math{(0.5,0.5)} is printed.

@verbatim
  (let ((dim 2) (reynolds 0.0))
    (solve 
     (blackboard
      :problem (driven-cavity 2 :reynolds reynolds) :base-level 0
      :success-if '(> :time 20.0) :output t :observe
      (append *stationary-fe-strategy-observe*
              (list
               (list (format nil "~{                 u~1D~}" '(1 2))
                     "~{~19,10,2E~}"
                     #'(lambda (blackboard)
                         (let ((val (fe-value (getbb blackboard :solution)
                                              (make-double-vec 2 0.5))))
                           (loop for i below dim collect (vref (aref val i) 0))))))))))
@end verbatim

@node Heat equation,  , Navier-Stokes problem, Solving problems
@subsection Heat equation

The solution of time-dependent problem is working, but it has not yet
been included into this version of @femlisp{}, because it does still
need some polishing.

@node Plotting, Common Lisp environment, Solving problems, First steps
@section Plotting

It is possible to plot mesh, solution, coefficient, the graph of the
stiffness matrix, or globally defined functions on a domain.  We
illustrate this on the example from @ref{Stationary diffusion problem}.
Plotting solution, mesh, source, and matrix can then be done with

@lisp
(plot (getbb *result* :solution))
(plot (getbb *result* :mesh))
(plot (getbb *result* :problem) :coefficient 'CDR::SOURCE)
(plot (getbb *result* :matrix))
@end lisp

You can also plot the result to several graphic formats.  For example,

@lisp
(plot (getbb *result* :mesh) :background :white :tubes nil :glyphs nil
      :plot :file :format "tiff"
      :filename "mesh.tiff")
@end lisp

@node Common Lisp environment,  , Plotting, First steps
@section Common Lisp environment

First, it is of uttermost importance that you use an editor which
"understands" Lisp code and can indent it correctly, show matching
parentheses or do suitable syntax-highlighting.  Otherwise, it is simply
not possible to program any nontrivial Lisp code.  On the other hand, if
such an editor is available, it will often provide also commands for
moving through the code and manipulating the code expression-wise.  It
is really worthwile to learn these editor features.

Furthermore, in contrast to most other languages, the ANSI Common Lisp
standard defines an interface for introspection.  E.g., functions and
special variables can be documented, and these so-called docstrings can
be extracted at any time.  For example:

@lisp
(defvar *result*
  "This special variable is often used for storing the result of the
  last top-level computation.")
@end lisp

Now, @code{(documentation '*result* 'variable)} returns the docstring
provided before.

The standard requires also an interface for tracing, inspecting data,
together with some debugging commands.  However, implementations vary in
the quality of the provided tools.  Commercial Lisps as Allegro CL,
Lispworks or Corman CL usually provide very elaborate IDEs which allow
for easy access to the above-mentioned features.  A free alternative is
the editor Emacs together with the SLIME package.  Emacs/SLIME can
handle a large range of Lisp implementations and provides more or less
the same possibilities as the commercial IDEs.

