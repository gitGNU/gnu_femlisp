@node First steps, Programming techniques, Installation, Top
@chapter First steps

@menu
* Demos::                       
* Solving problems::            
* Plotting::                    
* Common Lisp environment::     
* Learning Common Lisp::        
@end menu

@node Demos, Solving problems, First steps, First steps
@section Demos

Start @femlisp{} and look at the demos by typing @kbd{(femlisp-demo)}
(followed by @kbd{RETURN}) at the CL prompt (do not forget the
parentheses!).  You drop out of the demos by typing @kbd{quit} (without
parentheses) at the demo prompt, and you can exit @femlisp{} by typing
@kbd{(quit)} at the CL prompt.

@node Solving problems, Plotting, Demos, First steps
@section Solving problems

This section discusses how to solve several standard problems with
@femlisp{}.  It might be useful to read the following section on how to
use your Common Lisp environment before trying these examples.

@menu
* Stationary diffusion problem::  
* Nonlinear diffusion problem::  
* Elasticity problem::          
* Navier-Stokes problem::       
* Heat equation::               
* Eigenvalue problems::         
@end menu

@node Stationary diffusion problem, Nonlinear diffusion problem, Solving problems, Solving problems
@subsection Stationary diffusion problem

Assume that we want to solve the Poisson equation @math{\Delta u(x,y)
= f(x,y)} on the unit square @math{\Omega=(0,1)^2} with right-hand
side @math{f(x,y)=e^{x+y}} and Dirichlet boundary conditions
@math{u(x,y)=0} for @math{(x,y) \in \partial \Omega}.  The following
command solves this equation approximately on a uniformly refined mesh
using as termination criterion that the time for approximating the
solution has increased beyond 20 seconds.

@lisp
(let ((problem (cdr-model-problem (n-cube-domain 2)
                  :source #'(lambda (x) #I(exp(x[0]+x[1]))))))
  (defparameter *result*
     (solve (blackboard :problem problem :success-if '(> :time 20)))))
@end lisp

The result of the call to @function{solve} is a blackboard which we
saved in the global variable @var{*result*} for later reference.  We
can extract items from there using the function @code{getbb}, e.g. for
plotting the solution:
@lisp
(plot (getbb *result* :solution))
@end lisp

@node  Nonlinear diffusion problem, Elasticity problem, Stationary diffusion problem, Solving problems
@subsection Nonlinear diffusion problem

Assume that we want to solve the Bratu equation @math{-\Delta u = e^u}
on the unit square @math{\Omega=(0,1)^2} with Dirichlet boundary
conditions @math{u(x,y)=0} for @math{(x,y) \in \partial \Omega}.  The
following command solves this equation approximately on a uniformly
refined mesh using as termination criterion that the time for
approximating the solution has increased beyond 20 seconds.

@lisp
(defparameter *result*
   (solve (blackboard :problem (bratu-problem 2) 
                      :success-if '(> :time 20) :output :all)))
@end lisp

Again, the result of the call to @function{solve} is a blackboard
which we saved in the global variable @var{*result*} for later
reference.  It is interesting to study the actual definition of the
Bratu problem in the function @function{bratu-problem}.

@node Elasticity problem, Navier-Stokes problem, Nonlinear diffusion problem, Solving problems
@subsection Elasticity problem

Assume that we want to solve an elasticity problem with an isotropic
elasticity tensor determined by the Lame parameters
@math{\lambda=\mu=1} on the unit square @math{\Omega=(0,1)^2} with
right-hand side @math{\vec{f}(x,y)\equiv (1,0)^t} and Dirichlet
boundary conditions @math{\vec{u}(x,y)=0} for @math{(x,y) \in \partial
\Omega}.  The following command solves this equation approximately on
a uniformly refined mesh using as termination criterion that the time
for approximating the solution has increased beyond 20 seconds.

@lisp
(let* ((problem
        (elasticity-model-problem
         (n-cube-domain 2) :lambda 1.0 :mu 1.0
         :force (vector #m(1.0) #m(0.0))))
       (blackboard
        (blackboard :problem problem :output t
                    :success-if '(> :time 20.0))))
  (defparameter *result* (solve blackboard)))
@end lisp

@lisp
(plot (getbb *result* :solution))
@end lisp
now plots the x-component of the solution, whereas 
@lisp
(plot (getbb *result* :solution) :component 1)
@end lisp
plots the y-component.

A vector plot can be achieved using
@lisp
(plot (getbb *result* :solution) :component 'fl.elasticity::u :rank 1 :shape 2)
@end lisp

@node Navier-Stokes problem, Heat equation, Elasticity problem, Solving problems
@subsection Navier-Stokes problem

The following sequence is a short excerpt from the Driven cavity demo
in @file{femlisp/src/applications/navier-stokes/driven-cavity.lisp}.
It solves the two-dimensional driven cavity problem with Reynolds
number 10.  During the approximation the velocity components at the
midpoint @math{(0.5,0.5)} are printed.

@verbatim
(defparameter *result*
  (solve 
   (blackboard
    :problem (driven-cavity 2 :reynolds 10.0) :base-level 0
    :success-if '(> :time 20.0) :output t :observe
    (append *stationary-fe-strategy-observe*
	    (list
	     (list (format nil "~{                 u~1D~}" '(1 2))
		   "~{~19,10,2E~}"
		   #'(lambda (blackboard)
		       (let ((val (fe-value (getbb blackboard :solution)
                                    #d(0.5 0.5))))
			 (loop for i below dim collect
			      (vref (aref val i) 0))))))))))
@end verbatim

@node Heat equation, Eigenvalue problems, Navier-Stokes problem, Solving problems
@subsection Heat equation

The support for time-dependent problems is still rudimentary.
Especially, it is not yet incorporated in the solution strategy using
@code{solve}.  For setting up a Rothe method by hand, you may use code
like the following which solves a one-dimensional heat equation with
zero right-hand side and some initial values:
@verbatim
(let* ((dim 1) (levels 4) (order 2)
       (problem (cdr-model-problem
                 dim :initial #'(lambda (x) #I(sin(2*pi*x[0]^^2)))
                 :reaction 0.0 :source #m(0.0)))
       (rothe (make-instance
               '<rothe> :model-time 0.0 :time-step 0.01
               :stationary-success-if `(> :nr-levels ,levels)
               :success-if '(>= :step 20)
               :output t :plot t)))
  (defparameter *result*
    (iterate rothe (blackboard
                    :problem problem :fe-class (lagrange-fe order)
                    :plot-mesh nil :output t))))
@end verbatim

First, the mesh is built up to approximate the initial values until
given criteria are met (here the number of levels is prescribed).
Then a time-stepping scheme with the implicit Euler method and uniform
time-steps is used to approximate the solution in time.

@node Eigenvalue problems,  , Heat equation, Solving problems
@subsection Eigenvalue problems

There is some preliminary support for solving eigenvalue problems by
Wielandt's iteration.  For example, the first eigenvalue of the
Laplace operator on a unit square can be approximated with
@lisp
(let ((problem (cdr-model-problem 2 :evp (list :lambda (box 20.0)
                                               :mu (box 1.0)))))
  (defparameter *result*
    (solve (blackboard :problem problem
                       :success-if '(or (>= :time 5) (>= :nr-levels 5))
                       :output 1))))
(slot-value (getbb *result* :problem) 'lambda)
(plot (getbb *result* :solution))
@end lisp

Note that the multigrid algorithm has not yet been adapted for
eigenvalue problems.  Therefore, a sparse decomposition is used for
solving the linear systems which does not work for large problems.

@node Plotting, Common Lisp environment, Solving problems, First steps
@section Plotting

It is possible to plot mesh, solution, coefficient, the graph of the
stiffness matrix, or globally defined functions on a domain.  We
illustrate this on the example from @ref{Stationary diffusion
problem}.  When this example has been run, the plotting of solution,
mesh, source, and matrix can be done with

@lisp
(plot (getbb *result* :solution))
(plot (getbb *result* :mesh))
(plot (getbb *result* :problem) :coefficient 'CDR::SOURCE)
(plot (getbb *result* :matrix))
@end lisp

You can also plot the result to several graphic formats.  For example,

@lisp
(plot (getbb *result* :mesh) :background :white :tubes nil :glyphs nil
      :plot :file :format "tiff"
      :filename "mesh.tiff")
@end lisp

@node Common Lisp environment, Learning Common Lisp, Plotting, First steps
@section Common Lisp environment

First, it is of uttermost importance that you use an editor which
"understands" Lisp code and can indent it correctly, show matching
parentheses or do suitable syntax-highlighting.  Otherwise, it is
almost impossible to write nontrivial Lisp code.  On the other hand,
if such an editor is available, it will often provide commands for
moving through the code and manipulating the code expression-wise,
which makes writing Lisp even easier than writing, say, C.  It is very
useful to learn these editor features.

Furthermore, in contrast to most other languages, the ANSI Common Lisp
standard defines an interface for introspection.  E.g., functions and
special variables can be documented, and these so-called docstrings can
be extracted at any time.  For example:

@lisp
(defvar *result*
  "This special variable is often used for storing the result of the
  last top-level computation.")
@end lisp

Now, @code{(documentation '*result* 'variable)} returns the docstring
provided before.  If you use a decent Lisp environment, this command
can be invoked by pressing some key when the cursor is on the symbol
@code{*result*}.

The ANSI Common Lisp standard requires also an interface for tracing,
inspecting data, together with some debugging commands.  However,
implementations vary in the quality of the provided tools.  Commercial
Lisps as Allegro CL, Lispworks or Corman CL provide very elaborate
IDEs which allow for easy access to the above-mentioned features.  A
free alternative is the editor Emacs together with the SLIME package.
Emacs/SLIME can handle a large range of Lisp implementations and
provides more or less the same possibilities as the commercial IDEs.

@node Learning Common Lisp,  , Common Lisp environment, First steps
@section Learning Common Lisp

There is a very nice online book ``Practical Common Lisp'' by Peter
Seibel (Seibel 2005) which teaches Common Lisp.  It is available
online at @url{http://www.gigamonkeys.com/book}.
