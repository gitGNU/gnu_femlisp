@node FAQ, Reference manual, Overview, Top
@chapter FAQ

@menu
* Installation and Getting Started::  
* Mesh Management::             
* Linear Algebra::              
* Problems::                    
* Discretization::              
* Solvers::                     
* Parallelization::             
* General::                     
@end menu

@node Installation and Getting Started, Mesh Management, FAQ, FAQ
@section Installation and Getting Started

@enumerate
@item Q: On which architectures is Femlisp available?

   A: See the file INSTALL or the manual.

@item Q: What manuals and other introductory material are available?

   A: There is a short manual in the doc-directory which is partly a
   reference manual generated automatically from the Femlisp docstrings.
   There is a very nice book "Practical Common Lisp" by Peter Seibel which
   is also available online at <http://www.gigamonkeys.com/book>.

@item Q: What is the best way to get started?

   A: Work through the demos to see what is possible.  Then look through
   the section "Getting started" in the manual.  With the help of your IDE
   find out what SOLVE is doing here, then look at how the demos are done.
   Ask on the mailing list, if you should encounter problems.
@end enumerate

@node Mesh Management, Linear Algebra, Installation and Getting Started, FAQ
@section Mesh Management

@enumerate
@item Q: Which types of cells are available?

   A: Femlisp has simplices and simplex-product cells.  I.e. it has the
   interval in 1D, triangle and square in 2D, tetrahedron, prism, and cube
   in 3D, and so on for higher dimensions.  It does not have pyramids.  It
   would be rather easy to incorporate also those in the mesh module, but
   it is not clear to me how the construction should look like in higher
   dimensions.

@item Q: Can Femlisp do more than regular refinements?

   A: Yes, it can handle more or less arbitrary refinement rules,
   especially anisotropic product-cell refinement is available.
@end enumerate

@node Linear Algebra, Problems, Mesh Management, FAQ
@section Linear Algebra

@enumerate
@item Q: Why is Femlisp's linear algebra so slow?

   A: Because the sparse-matrix implementation is based on hash-tables
   indexed by mesh-entities like vertices, lines, ..., and each entry is
   again a block consisting of a matrix object.  This means that generic
   functions have to be used for handling those entries.  Unfortunately,
   the overhead for hash-table and method lookup is large, especially in
   the case of scalar equations with low-order discretizations.

@item Q: Is it possible to improve the linear algebra?

   A: It is possible to improve it by replacing the data structure by a
   more efficient array-based one where the operations are also specialized
   depending on the type of their entries.  I have started working on this
   and preliminary results look promising.  The result should be a
   matrix-vector data structure having most of the flexibility of the
   current approach while being as efficient as the usual CRS scheme.
@end enumerate

@node Problems, Discretization, Linear Algebra, FAQ
@section Problems

@enumerate
@item Q: How can I solve nonlinear problems?

   A: See the files src/applications/cdr/bratu.lisp and
   src/applications/navier-stokes/driven-cavity.lisp for examples how to
   solve nonlinear pdes by a Newton iteration and multigrid.

@item Q: How can I solve time-dependent problems?

   A: This is work in progress.  At the moment, you have still to set up
   your time-stepping scheme yourself by assembling a delta-t dependent
   term in matrix and right-hand side.

@item Can Femlisp handle coupled problems?

   A: Yes.  This is done by marking parts of a domain and specifying
   problems depending on this mark.

@item Q: Can Femlisp solve my specific problem?

   A: Please ask on the femlisp-user mailing list for help.  You will have
   to subscribe for doing so (spam protection).
@end enumerate

@node Discretization, Solvers, Problems, FAQ
@section Discretization

@enumerate
@item Q: Is it possible to handle problems with more than one right-hand side
   with different choice of essential boundary?
   
   A: For the moment, no.  This feature needs that the system matrix is the
   same for every such right-hand-side.  Changes in the location of
   essential boundary require slightly different matrices which does not
   fit into this pattern.
@end enumerate

@node Solvers, Parallelization, Discretization, FAQ
@section Solvers

@enumerate
@item Q: Is there a GMRES iteration available?

   A: No, not yet.  This would be a very welcome contribution.
@end enumerate

@node Parallelization, General, Solvers, FAQ
@section Parallelization

@enumerate
@item Q: What about parallelization?

   A: This has been started for MISD architectures, but results are not yet
   very good (i.e. the speedup is not large, probably due to shortcomings
   of the CL implementations).  Parallelization for MIMD architectures is
   also possible using MPI or PVM, but would require a major restructuring.
@end enumerate

@node General,  , Parallelization, FAQ
@section General

@enumerate
@item Q: Why was Femlisp written in Common Lisp?

   A: Despite of its age, Common Lisp is still one of the most expressive
   languages available.  It usually comes with powerful interactive
   environments and makes an ideal tool for both exploratory programming
   and production use.

@item Q: How does Femlisp's compare with other programs wrt speed?

   A: This depends very much on the problem at hand.  Femlisp is slow for
   several standard problems.  On the other hand, it can also perform
   astonishingly well for other benchmark problems (compared with other
   unstructured-mesh FEM toolboxes).  Furthermore, very often the speed of
   program development is the decisive factor.  Here, Common Lisp cannot be
   beaten by statically typed languages like C++ or Fortran.

@item Q: Why is Femlisp slow for my specific problem?

   A: Please ask on the femlisp-user mailing list for optimization help.

@end enumerate

