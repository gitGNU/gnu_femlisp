@node Overview, Reference manual, Programming techniques, Top
@chapter Overview

In brief, @femlisp{} has the following features:

@itemize @bullet
@item Unstructured grids in arbitrary space dimensions @math{n \geq 0}.
Cells can be arbitrary products of simplices.
@item Isoparametric and non-parametric element mappings
@item Local grid refinement
@item Lagrange finite elements of arbitrary order
@item Several types of PDEs are already implemented:
@itemize
@item Convection-diffusion-reaction equations
@item Elasticity
@item Navier-Stokes
@end itemize

@item Time-dependent problems using Rothe's method
@item Geometric and algebraic multigrid methods
@item Graphics (using @emph{Data Explorer}, @emph{Gnuplot})
@item Interactive environment
@end itemize

The following picture shows the internal structure of @femlisp{} which
consists of several modules.  In the figure, the module dependency is
indicated by arrows.  The modules appear in this form in the system
definition file @file{femlisp;femlisp.asd}.  They often correspond to
a Common Lisp @emph{package}, but may sometimes comprise several
packages, where a package defines a namespace in Common Lisp.

@image{femlisp-structure,,10cm,Important packages and their dependency}

The @femlisp{} modules can be roughly ordered in levels.  The lowest
level consists of the three modules @package{MACROS},
@package{UTILITIES}, and @package{MATLISP}.  @package{MACROS} and
@module{UTILITIES} extend CL with some useful macro and function
definitions, while @module{MATLISP} contains a Common Lisp
implementation of some BLAS and LAPACK routines which is similar to
@emph{Matlisp}, see @cite{Matlisp}.

The second level consists of the modules @module{ALGEBRA},
@module{MESH} and @module{GRAPHIC}.  @module{GRAPHIC} provides a
low-level interface to external graphic software; at the moment both
IBM's @emph{OpenDX} and @emph{Gnuplot} are supported.
@module{ALGEBRA} contains the data structures and operations used for
linear algebra and @module{MESH} contains mesh management including
domain definitions.  Both the @module{MESH} and @module{ALGEBRA}
module will be discussed in more detail below.

The third level consists of the following modules:
@enumerate
@item The @module{ITERATION} module contains the definition for the
abstract classes @class{<solver>}, @class{<iteration>}, as well as the
generic function @function{solve} which constitute the interface for
linear and non-linear solving.  Several instances of these classes are
implemented, including the conjugate gradient iteration and algebraic
multigrid (AMG).  The module also contains the @module{GEOMG} package,
which handles iterations that depend on geometric information,
e.g.~from the discretization.  At the moment, these are the geometric
multigrid iteration, an AMG-like scheme for preconditioning high-order
discretizations with low-order ones, and some block smoothers with
overlapping blocks.

@item The @module{DISCRETIZATION} module defines
@class{<discretization>} as an abstract class and
@class{<fe-discretization>} as a concrete derived class.  A generic
function @function{get-fe} is used for associating a cell with a
finite element @class{<fe>}, which is a data structure containing
information about base functions and dual functionals on the
corresponding cell.  Lagrange finite elements of arbitrary order are
implemented as a special instance of @class{<fe-discretization>}.
Note that other discretizations as finite differences or finite
volumes could easily be incorporated as well.

@item The @module{PROBLEM} module introduces the general class
@class{<problem>} and its most important subclass
@class{<pde-problem>}.  Several derived problems are defined,
e.g. @class{<cdr-problem>} for convection-diffusion-reaction problems,
@class{<elasticity>} for elasticity problems, and
@class{<navier-stokes>} for Navier-Stokes problems.  These problems
are defined in their own packages.

@end enumerate

The fourth level provides another level of abstraction.  It consists
of the modules @module{STRATEGY} and @module{PLOT}.  @module{STRATEGY}
provides methods for solving problems by adaptive FEM, and
@module{PLOT} defines generic functions and methods for
post-processing (plotting of coefficients, meshes, and functions).

The fifth level @module{APPLICATION} has access to a lot of basic
modules, especially @module{STRATEGY}, @module{DISCRETIZATION}, and
@module{PLOT}.  There are several separate directories and files
containing applications of @femlisp{} to special problems.

The next section describes the packages contained in these modules in
detail.
