@node Installation, First steps, Introduction, Top
@chapter Installation

@menu
* Software needed::
* Detailed installation instructions::
@end menu

@node Software needed, Detailed installation instructions, Installation, Installation
@section Software needed

For @femlisp{} installation, you will need the following:

@menu
* Common Lisp implementation::
* Graphics software::
* Numerical software::
* Common Lisp libraries::
@end menu

@node Common Lisp implementation, Graphics software, Software needed, Software needed
@subsection Common Lisp implementation
@femlisp{} is tested regularly on SBCL, so it can be expected to work
best with this implementation.

Former @femlisp{} versions have been tested with many other ANSI Common
Lisp implementations, i.e. Allegro CL, CMUCL, Clozure CL, ECL,
Lispworks, SBCL, Scieneer CL, and even CLISP (however, since CLISP does
not compile to native code, too slowly for most practical uses), and it
should be quite straightforward to port it to other ANSI Common Lisp
implementations as well (e.g. ABCL or GCL).

@node Graphics software, Numerical software, Common Lisp implementation, Software needed
@subsection Graphics software.
@femlisp{} can make use of the following graphic programs:

@itemize
@item Data Explorer (OpenDX)
@item Gnuplot
@item VTK
@end itemize

@node Numerical software, Common Lisp libraries, Graphics software, Software needed
@subsection Numerical software
@femlisp{} can make use of the following libraries:

@itemize
@item BLAS/LAPACK libraries
@item The sparse direct solvers UMFPACK and/or SuperLU
@item The 2D mesh generator Triangle by R. M. Shewchuk.
@item The 3D mesh generator Tetgen by Hang Si
@item An MPI implementation
@end itemize

Availability of the BLAS/LAPACK libraries as well as the sparse direct
solvers can improve performance, although large parts of @femlisp{} will
work without them.  In the same way, most of the @femlisp{} demos are
concerned with model problems for which no advanced mesh generation is
necessary.  Finally, MPI is needed only when you want to run @femlisp{}
as a distributed application.

@node Common Lisp libraries,  , Numerical software, Software needed
@subsection Common Lisp libraries.
Internally, @femlisp{} uses the following Common Lisp libraries:

@itemize
@item ASDF from Daniel Barlow (and many others)
@item The INFIX library from Mark Kantrowitz
@item The BORDEAUX-THREADS library by Daniel Barlow
@item The CLOSER-MOP library by Pascal Costanza
@item The FIVE-AM library by Stelian Ionescu
@item The CFFI library by Luis Oliveira
@item The LPARALLEL library by James M. Lawrence
@item The LFARM library by James M. Lawrence
@item The CL-MPI library by Marco Heisig
@item The CL-PPCRE library by Edi Weitz
@end itemize

Note that you should not have to care about installing any of those
libraries, if you are using the Common Lisp software manager Quicklisp
by Zach Beane as suggested in the following section.

@c ----------------------------------------------------------------

@node Detailed installation instructions,  , Software needed, Installation
@section Detailed installation instructions

@menu
* SBCL installation::
* Quicklisp::
* Graphics::
* Additional numerical software::
* Femlisp Installation::
@end menu

@node SBCL installation, Quicklisp, Detailed installation instructions, Detailed installation instructions
@subsection SBCL installation

SBCL is a well-established free Common Lisp implementation on which
@femlisp{} is developed and regularly tested.

On Debian/GNU Linux, SBCL can be installed using

@example
    sudo apt install sbcl sbcl-source sbcl-doc
@end example

Although @femlisp{} will probably work with many other CL
implementations, the precise installation procedures can be quite
different, and we do not want to handle this here.

@node Quicklisp, Graphics, SBCL installation, Detailed installation instructions
@subsection Quicklisp

In recent years, Quicklisp (see @url{http://www.quicklisp.org/}) has
become the de facto standard for loading Common Lisp libraries.  Make
sure that it works for you.

Quicklisp installation is easy following the installation instructions
from the Quicklisp homepage @cite{Quicklisp} which are essentially the
following commands:

@example
  curl -O https://beta.quicklisp.org/quicklisp.lisp
  sbcl --load quicklisp.lisp  # if your CL implementation is SBCL
  * (quicklisp-quickstart:install)
  * (ql:add-to-init-file)
  * (quit)
@end example

On recent Debian/GNU Linux or Ubuntu versions, Quicklisp can even be
installed as a package using

@example
    sudo apt install cl-quicklisp
@end example

@node Graphics, Additional numerical software, Quicklisp, Detailed installation instructions
@subsection Graphic programs

@femlisp{} uses two graphics packages, namely Gnuplot and Data
Explorer (OpenDX).  Make sure that they can be found in your path and
that they work.

On Linux, these libraries should be available using the package
manager.  For example, on Debian/GNU Linux, they can be installed using
something like the following shell command:

@example
    sudo apt install dx dx-doc gnuplot gnuplot-doc
@end example

@node Additional numerical software, Femlisp Installation, Graphics, Detailed installation instructions
@subsection Additional numerical software

@femlisp{} can make use of some external software described in this
section, but it does not depend on it in a critical way.  Therefore, you
may postpone its installation until later, unless you already have a
certain application in mind.

@menu
* BLAS/LAPACK libraries::
* Direct sparse solvers::
* Mesh generators::
* MPI::
@end menu

@node  BLAS/LAPACK libraries, Direct sparse solvers, Additional numerical software, Additional numerical software
@subsubsection BLAS/LAPACK libraries

Although @femlisp{} has an own implementation of the BLAS/LAPACK
capabilities it needs, the optimized versions may increase performance
significantly.

On Debian/GNU Linux, these libraries are available as packages called
something like ``libblas<version>'' or ``liblapack<version>''.  These
packages provide shared libraries (.so suffix) which are linked to
@femlisp{} when it is loaded.

@node Direct sparse solvers, Mesh generators, BLAS/LAPACK libraries, Additional numerical software
@subsubsection Direct sparse solvers

@femlisp{} can link to two sparse direct solvers, namely SuperLU or
UMFPACK.  Again those solvers have to be supplied as shared libraries.
On Debian/GNU Linux, these are available as packages called something
like ``libsuperlu<version>'' or ``libumfpack<version>''.

Note that direct solvers are not necessary for most of the @femlisp{}
demonstrations, because hierarchical solvers are usually more efficient.

@node Mesh generators, MPI, Direct sparse solvers, Additional numerical software
@subsubsection Mesh generators

Femlisp can make use of the 2D mesh generator Triangle by J. R. Shewchuk
and the 3D mesh generator Tetgen by Hang Si.

On Debian/GNU Linux, these programs can be installed using

@example
    sudo apt install triangle-bin tetgen
@end example

When this succeeds, the corresponding binaries ``triangle'' and
``tetgen'' should be found, and can also be used by @femlisp{}.

Note that for a lot of model problems, the mesh can be constructed in a
rather straightforward way, such that mesh generators are not needed.
Especially, this is the case for most of the @femlisp{} demos.

@node MPI,  , Mesh generators, Additional numerical software
@subsubsection MPI

If you want to do distributed computing with @femlisp{}, you need an MPI
implementation.  We mostly use OpenMPI, but also others (e.g. MPICH or
IntelMPI) should work.

On Debian/GNU Linux, OpenMPI can be installed using

@example
    sudo apt install openmpi-bin
@end example

@node Femlisp Installation,  , Additional numerical software, Detailed installation instructions
@subsection Femlisp Installation

@menu
* Downloading Femlisp::
* Configuring Femlisp::
* Getting CL libraries::
* Registering Femlisp::
* Compiling Femlisp::
* Starting Femlisp::
@end menu

@node Downloading Femlisp, Configuring Femlisp, Femlisp Installation, Femlisp Installation
@subsubsection Downloading Femlisp

Although Quicklisp provides some version of Femlisp, it may be
recommendable to obtain a more recent one by cloning the Femlisp git
repository directly using

@example
git clone git://git.savannah.nongnu.org/femlisp.git
@end example

The result of this command should be a directory called ``femlisp''.

@node  Configuring Femlisp, Getting CL libraries, Downloading Femlisp, Femlisp Installation
@subsubsection Configuring Femlisp

Move into the @femlisp{} directory and issue the command

@example
make configure
@end example

You will be asked some parameters and can check that the suggested
default values fit.

@node Getting CL libraries, Registering Femlisp, Configuring Femlisp, Femlisp Installation
@subsubsection Getting CL libraries

Move into the @femlisp{} directory and issue the command

@example
make quickload-libraries
@end example

@footnote{
If you should encounter the problem that you have a version of
ASDF which is too old (which may happen if your CL implementation is too
old), you may try to get around this problem by installing a recent
version of ASDF in the directory @file{femlisp/external} by:

@example
make asdf
@end example

and adding the following line to your CL initialization file (.sbclrc
for SBCL):
@example
#-asdf3.1 (load (merge-pathnames "femlisp/external/asdf/build/asdf.lisp" (user-homedir-pathname)))
@end example
}

@node Registering Femlisp, Compiling Femlisp, Getting CL libraries, Femlisp Installation
@subsubsection Registering Femlisp

Femlisp provides several own ``system files'' which have to be
registered with ASDF (the Common Lisp system loading facility which is
the de-facto standard nowadays).  This can be done by appending the
following lines to the initialization file of your CL implementation
(~/.sbclrc for SBCL), after the lines for the initialization of
Quicklisp:

@example
;; registering Femlisp systems (change path if necessary)
(let ((femlisp-init (merge-pathnames "femlisp/systems" (user-homedir-pathname))))
  (when (probe-file femlisp-init)
    (push femlisp-init (intern "*CENTRAL-REGISTRY*" (find-package :asdf)))))
@end example

@node Compiling Femlisp, Starting Femlisp, Registering Femlisp, Femlisp Installation
@subsubsection Compiling Femlisp

Move into the @femlisp{} directory and issue the command

@example
make femlisp
@end example

This will compile @femlisp{} and save a suitable core in the ``bin''
subdirectory.

@node Starting Femlisp,  , Compiling Femlisp, Femlisp Installation
@subsubsection Starting Femlisp

If installation was successful, @femlisp{} can be started by executing
the script ``bin/femlisp'' and you can continue as described in chapter
@ref{First steps}.
