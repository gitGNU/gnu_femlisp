@node Installation, First steps, Introduction, Top
@chapter Installation

@menu
* Software needed::             
* Quick installation ::         
* Detailed installation::       
@end menu

@node Software needed, Quick installation , Installation, Installation
@section Software needed

@itemize
@item A Common Lisp implementation which conforms to the ANSI standard.
@femlisp{} is known to work with Allegro CL, CMUCL and SBCL.  However,
it should be easy to port it to other ANSI Common Lisp implementations
as well.

@item Some Common Lisp software, namely:
@itemize
@item ASDF from Daniel Barlow.
@item Mark Kantrowitz' INFIX library.
@end itemize

@item A Common Lisp environment.  I would recommend the combination Emacs/SLIME.  Emacs/Ilisp or CMUCL/Hemlock would be alternatives,
however both Ilisp and Hemlock seem to be not actively maintained
anymore.  Allegro CL has its own Emacs interface and (on Windows) an
own IDE with enhanced capabilities.

@item Graphics software.  If you want to have graphics available, you
should have installed the following packages in such a way that they are
found in your current path.
@itemize
@item Data Explorer (OpenDX)
@item Gnuplot
@end itemize

@item Numerical software.  Although @femlisp{} works also without
additional software, it is reasonable to have the following libraries
available.
@itemize
@item UMFPACK or SuperLU
@item Triangle by R. M. Shewchuk.
@end itemize

@item Documentation
@itemize
@item The ANSI Common Lisp Hyperspec.  This is freely available from Xanalys.
@end itemize
@end itemize

@c ----------------------------------------------------------------

@node Quick installation , Detailed installation, Software needed, Installation
@section Quick installation

Since Femlisp needs only a working ANSI Common Lisp installation with
reasonable floating-point performance, it is easy to install given
such an environment.  More precisely, let us assume that you have one
of Allegro CL, CMUCL or SBCL installed, and that you have downloaded
Femlisp using either
@example
cvs -z3 -d:ext:anoncvs@@savannah.nongnu.org:/cvsroot/femlisp co femlisp
@end example
or
@example
wget -O - http://www.femlisp.org/femlisp-current.tar.gz | tar xzvf -
@end example
Then you should be able to start up Femlisp by simply loading the file
@path{start.lisp} from the directory @path{femlisp}.  However, this is
a rather spartanic version, if you do not have certain other
applications installed on your system.  In Section @ref{Detailed
installation} you can find more information on installing helper
applications for plotting, direct solving or mesh generation.

Now, the rest of this section describes how to set up a complete
environment for Femlisp on special operating systems.

@menu
* Debian GNU/Linux::            
* Mac OS X::                    
@end menu

@node Debian GNU/Linux, Mac OS X, Quick installation , Quick installation
@subsection Debian GNU/Linux

The following approach should work if you are on Debian/Sarge and your
@path{/etc/apt/sources.list} file is setup to find also @emph{nonfree}
and @emph{contrib} packages:

@example
# Necessary:
apt-get install wget gnuplot dx
apt-get install cmucl cl-infix cl-asdf 

# Recommended:
apt-get install libsuperlu3 libsuperlu3-dev
apt-get install libumfpack4 libumfpack4-dev

# Documentation (recommended)
apt-get install cmucl-doc cmucl-source hyperspec

cd ABSOLUTE_PATH_TO_DIRECTORY_OF_YOUR_CHOICE

# get Femlisp by CVS or FTP
#cvs -z3 -d:ext:anoncvs@@savannah.nongnu.org:/cvsroot/femlisp co femlisp
wget -O - http://www.femlisp.org/femlisp-current.tar.gz | tar xzvf -

cd femlisp          # change to the Femlisp directory

### At this point, you should check the paths in
### "femlisp/interface/Makefile" !

# if you have installed SuperLU and/or UMFPACK above:
make superlu        # compiles the SuperLU interface
make umfpack        # compiles the UMFPACK interface

# if you need automatic 2D triangulation:
make triangle       # gets and compiles the Triangle mesh generator

# compile Femlisp
make configure      # interactive setup (choose cmucl or sbcl) 
make femlisp        # compiles Femlisp and creates an executable

# we are done
make documentation  # generate the Femlisp documentation
@end example

Now you can continue as described in @ref{Setup of an interactive
environment}.

@node Mac OS X,  , Debian GNU/Linux, Quick installation
@subsection Mac OS X

The following approach should work if you are on Mac OS X, and have
the Apple development tools, X11, and Fink installed.  Please make
sure that you have also a recent version of Emacs.

@example
apt-get install wget gnuplot dx cmucl slime

cd ABSOLUTE_PATH_TO_DIRECTORY_OF_YOUR_CHOICE

# get Femlisp by CVS or FTP
#cvs -z3 -d:ext:anoncvs@@savannah.nongnu.org:/cvsroot/femlisp co femlisp
wget -O - http://www.femlisp.org/femlisp-current.tar.gz | tar xzvf -

cd femlisp          # change to the Femlisp directory
make configure      # interactive setup
make femlisp        # creates a Femlisp executable

# we are done
make documentation  # generate the Femlisp documentation
@end example

Now you can continue as described in @ref{Emacs configuration}.

@c ----------------------------------------------------------------

@node Detailed installation,  , Quick installation , Installation
@section Detailed installation

@menu
* Obtaining Femlisp::           
* Installation of a CL implementation::  
* Graphics::                    
* Direct solvers::              
* Triangle mesh generator::     
* Installation of ASDF and Infix::  
* Configuration of the startup script::  
* Compiling Femlisp::           
* Setup of an interactive environment::  
* Emacs configuration::         
@end menu

@node Obtaining Femlisp, Installation of a CL implementation, Detailed installation, Detailed installation
@subsection Obtaining Femlisp

@enumerate
@item Alternative 1: Download the current @femlisp{} version as follows
(if @command{wget} should not be available try @command{curl} instead)
@example
wget -O - http://www.femlisp.org/femlisp-current.tar.gz| tar xzvf -
@end example

You can check the correctness of the download against the binary GPG
signature in @url{http://www.femlisp.org/femlisp-current.tar.gz.sig}.
My public PGP key can be found at
@url{http://www.iwr.uni-heidelberg.de/~Nicolas.Neuss/nicolas_neuss.pgp}.

@item Alternative 2: Checkout a CVS version using the command
@example
cvs -z3 -d:ext:anoncvs@@savannah.nongnu.org:/cvsroot/femlisp co femlisp
@end example
@end enumerate

@node Installation of a CL implementation, Graphics, Obtaining Femlisp, Detailed installation
@subsection Installation of a CL implementation

There are two free Common Lisp implementations with which @femlisp{}
is known to work, namely CMUCL and SBCL.  It runs also on Allegro CL,
and should run with little changes on Scieneer CL.  In the future, it
might also be possible to use @femlisp{} with ECL or GCL, since those
implementations are on a good path towards compliance to the ANSI CL
specification.  On the other hand, using @femlisp{} with interpreters
or bytecode compilers like CLISP does not make much sense, because
such implementations are probably much too slow.  Also using
Lispworks, Corman CL, and OpenMCL will probably be too slow, because
those implementations are to my knowledge not strong enough with
respect to fast floating point arithmetic.

@node Graphics, Direct solvers, Installation of a CL implementation, Detailed installation
@subsection Graphics

@femlisp{} uses two graphics packages, namely Gnuplot and Data
Explorer (OpenDX).  Make sure that they can be found in your path and
that they work.

@node Direct solvers, Triangle mesh generator, Graphics, Detailed installation
@subsection Direct solvers

@femlisp{} can link to two sparse direct solvers, namely SuperLU or
UMFPACK.  It is reasonable to install at least one of those as a
shared library on your system.  After you have done that, you have to
compile the glue programs superlu.c and/or umfpack.c in the directory
@path{femlisp/interface}.  This can be done by issuing the commands

@example
make superlu
@end example

or

@example
make umfpack
@end example

from within the @path{femlisp} directory.  If these commands cannot
figure out the path to the libraries, feel free to edit the Makefile
in @path{femlisp/interfaces} according to your needs.

@node Triangle mesh generator, Installation of ASDF and Infix, Direct solvers, Detailed installation
@subsection Triangle mesh generator

Next, Femlisp can link to the mesh generator Triangle by
J. R. Shewchuk.  If you do have it on your system, you only have to
make sure that it can be found in your path.  If not, you can download
and install it in the directory @path{femlisp/external} by issuing the
command

@example
make triangle
@end example

from withing the @path{femlisp} directory.

@node Installation of ASDF and Infix, Configuration of the startup script, Triangle mesh generator, Detailed installation
@subsection Installation of ASDF and Infix

You need a defsystem facility for using Femlisp in a comfortable way.
Recent versions of Femlisp use ASDF from Daniel Barlow.  For
convenience, a copy is included in the directory @path{external}.

Second, Femlisp needs the Infix library by Mark Kantrowitz.  For
convenience, a version is contained in the Femlisp distribution in the
directory @path{external}.  This version is used if the Infix library
is not yet incorporated into your Lisp.

@node Configuration of the startup script, Compiling Femlisp, Installation of ASDF and Infix, Detailed installation
@subsection Configuration of the startup script

After these steps you should issue the command
@example
make configure
@end example
and answer the questions being asked.

@node Compiling Femlisp, Setup of an interactive environment, Configuration of the startup script, Detailed installation
@subsection Compiling Femlisp

You should now be able to start @femlisp{} by executing the script
@file{femlisp/bin/femlisp}.  The first time you use this script, your
Lisp implementation will have to compile @femlisp{} which may take a
while.  The next time, startup will be much faster.  You can exit
Lisp/@femlisp{} by typing "(quit)".  Note that it is recommendable to
invoke this newly created executable either from an Emacs shell buffer
or wrapped inside the readline-wrap @command{rlwrap} (i.e. as
@code{rlwrap femlisp}).

You can also save a core which avoids reloading @femlisp{} during
startup.  This is done by executing the command
@example
make femlisp
@end example
After that, @femlisp{} should always start up fast.  Note that after a
change in @femlisp{} source code, this step has to be repeated.

@node Setup of an interactive environment, Emacs configuration, Compiling Femlisp, Detailed installation
@subsection Setup of an interactive environment

It is essential to use @femlisp{} from within a Lisp environment
because otherwise you do not even have a command history.  A freely
available Lisp environment is Emacs where you can use the built-in
inferior-lisp-mode, Ilisp, or SLIME.  Since inferior-lisp-mode is not
very good and Ilisp does not seem to be actively developed anymore, I
recommend using SLIME.  If you do not have it installed on your
system, you may try the command

@example
make slime
@end example

from within the @femlisp{} directory @path{femlisp}.  This will try to
download a version of SLIME in @path{femlisp/external}.

@node Emacs configuration,  , Setup of an interactive environment, Detailed installation
@subsection Emacs configuration

Finally, you should put the following lines in the file @file{.emacs}
in your home directory:

@lisp
(setq *femlisp-root* "ABSOLUTE_PATH_TO_DIRECTORY_OF_YOUR_CHOICE/femlisp/")
(add-to-list *femlisp-root* load-path)

;;; if you have installed SLIME with "make slime" in the Femlisp
;;; directoy, you will need the following line:
(add-to-list 'load-path (concat *femlisp-root* "/elisp/slime"))

(require 'slime)
(slime-setup)

(require 'femlisp)

;;; for showing the SLIME buffer if it is hidden
(defun show-repl-maybe-start-slime ()
  (interactive)
  (if (slime-connected-p)
      (slime-display-output-buffer)
      (slime)))
(global-set-key [f9] 'show-repl-maybe-start-slime)
@end lisp

Now the Emacs command @kbd{M-x femlisp} should fire up SLIME and load
@femlisp{}.  Whenever your SLIME buffer is hidden, you can bring it up
again by pressing @kbd{F9}.
