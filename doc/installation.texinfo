@node Installation, First steps, Introduction, Top
@chapter Installation

@menu
* Software needed::
* Installation instructions::
* Additional software::
* Using Femlisp as a standalone program::
@end menu

@node Software needed, Installation instructions, Installation, Installation
@section Software needed

@itemize
@item A Common Lisp implementation which is sufficiently ANSI conformant.
@femlisp{} is known to work with all major ANSI Common Lisp
implementations, i.e. Allegro CL, CMUCL, Clozure CL, ECL, Lispworks,
SBCL, Scieneer CL.  Furthermore, it runs with CLISP (however, since
CLISP does not compile to native code, too slowly for most practical
uses), and it should be quite straightforward to port it to other ANSI
Common Lisp implementations as well (e.g. ABCL or GCL).

@item Some Common Lisp software, namely:
@itemize
@item ASDF from Daniel Barlow.
@item The INFIX library from Mark Kantrowitz'.
@item The BORDEAUX-THREADS library by Daniel Barlow
@item The LPARALLEL library by James M. Lawrence
@item The CL-PPCRE library by Edi Weitz
@end itemize

@item Graphics software.
If you want to have graphics available, you should have installed the
following packages in such a way that they are found in your current
path.
@itemize
@item Data Explorer (OpenDX)
@item Gnuplot
@end itemize
An alternative to OpenDX is some VTK viewer like Mayavi/Mayavi2.
However, in contrast to OpenDX, these viewers are not started
automatically from within Femlisp.

@item Numerical software.  
@femlisp{} can make use of the following software (although it does not
need them):
@itemize
@item UMFPACK and/or SuperLU
@item Triangle by R. M. Shewchuk.
You should install this, if you need a 2D triangle mesh generator.  This
probably will not be necessary for academic research and model problems.
@end itemize

@item Documentation
@itemize
@item The ANSI Common Lisp Hyperspec.  
This is a HTMLized copy of the ANSI Common Lisp standard which was made
freely available by Lispworks.
@end itemize
@end itemize

@c ----------------------------------------------------------------

@node Installation instructions, Additional software, Software needed, Installation
@section Installation instructions

@menu
* Installation of a CL implementation::
* Getting Quicklisp::
* Graphics::
* Obtaining Femlisp::
* Using Femlisp::
@end menu

@node Installation of a CL implementation, Getting Quicklisp, Installation instructions, Installation instructions
@subsection Installation of a CL implementation

There are several free Common Lisp implementations with which @femlisp{}
is known to work completely, namely CMUCL and SBCL.  It runs also on the
commercial implementations Scieneer CL, Allegro CL, and Lispworks.
Femlisp should also run with ECL and Clozure CL, however, it is not
regularly tested with those implementations.

The most popular choice is probably SBCL (Steel Bank Common Lisp), see
@url{http://www.sbcl.org}, which is available as a package in most Linux
systems.

@node Getting Quicklisp, Graphics, Installation of a CL implementation, Installation instructions
@subsection Getting Quicklisp
In recent years, Quicklisp (see @url{http://www.quicklisp.org/}) has
become the de facto standard for getting Common Lisp libraries.  Make
sure that it works for you.  Note that Quicklisp installation is VERY
easy following the installation instructions on the Quicklisp homepage.

@node Graphics, Obtaining Femlisp, Getting Quicklisp, Installation instructions
@subsection Graphics

@femlisp{} uses two graphics packages, namely Gnuplot and Data
Explorer (OpenDX).  Make sure that they can be found in your path and
that they work.

On most Linux systems, this software is available as a package.

@node Obtaining Femlisp, Using Femlisp, Graphics, Installation instructions
@subsection Obtaining Femlisp

Issue the command
@example
(ql:quickload "femlisp")
@end example

Alternatively, you may clone the Femlisp git repository directly using
@example
git clone git://git.savannah.nongnu.org/femlisp.git
@end example
(The ``nongnu'' in the server name refers to the fact, that Femlisp is
covered by a BSD license instead of the more restrictive GNU license.)

Then you have to make sure that the Common Lisp system utility asdf can
find the file @path{femlisp/femlisp.asd}.  After that you can load
Femlisp using
@example
(asdf:oos 'asdf:load-op :femlisp)
@end example

@node Using Femlisp,  , Obtaining Femlisp, Installation instructions
@subsection Using Femlisp
You should now be ready for using @femlisp{}.  For example, you can
start a demo by
@example
(fl.demo:femlisp-demo)
@end example

@node Additional software, Using Femlisp as a standalone program, Installation instructions, Installation
@section Additional software

@femlisp{} can make use of further external software, which you may
install if necessary.

@menu
* Direct solvers::
* Triangle mesh generator::
@end menu

@node Direct solvers, Triangle mesh generator, Additional software, Additional software
@subsection Direct solvers

@femlisp{} can link to two sparse direct solvers, namely SuperLU or
UMFPACK.  When those are available on your system, you have to compile
the glue programs superlu.c and/or umfpack.c in the directory
@path{femlisp/interface}.  This can be done by issuing the commands
@example
make superlu
@end example
or
@example
make umfpack
@end example
from within the @path{femlisp} directory.  If these commands cannot
figure out the path to the libraries, feel free to edit the Makefile in
@path{femlisp/interfaces} according to your needs.

@node Triangle mesh generator,  , Direct solvers, Additional software
@subsection Triangle mesh generator

Next, Femlisp can make use of the mesh generator Triangle by
J. R. Shewchuk, which is available as a package in most Linux
implementations.  If you have it installed on your system, you only have
to make sure that it can be found in your path, such that Femlisp can
find it.

@node Using Femlisp as a standalone program,  , Additional software, Installation
@section Using Femlisp as a standalone program

This section is only of relevance, if you want to use Femlisp as a
standalone program without too much tweaking.

@menu
* Configuration of the startup script::
* Compiling Femlisp::
* Saving a Femlisp core::
@end menu

@node Configuration of the startup script, Compiling Femlisp, Using Femlisp as a standalone program, Using Femlisp as a standalone program
@subsection Configuration of the startup script

Issue the command
@example
make configure
@end example
in the @path{femlisp} directory and answer the questions being asked.

@node Compiling Femlisp, Saving a Femlisp core, Configuration of the startup script, Using Femlisp as a standalone program
@subsection Running Femlisp

You should now be able to start @femlisp{} by executing the script
@file{femlisp/bin/femlisp}.  The first time you use this script, your
Lisp implementation will have to compile @femlisp{} which may take a
while.  The next time, startup will be much faster.  You can exit
Lisp/@femlisp{} by typing "(quit)".  Note that it is recommendable to
invoke this newly created executable either from an Emacs shell buffer
or wrapped inside the readline-wrap @command{rlwrap} (i.e. as
@code{rlwrap femlisp}).

@node Saving a Femlisp core,  , Compiling Femlisp, Using Femlisp as a standalone program
@subsection Saving a Femlisp core
You can also save a core which avoids reloading @femlisp{} during
startup.  This is done by executing the command
@example
make femlisp
@end example
After that, @femlisp{} should always start up fast.  Note that after a
change in @femlisp{} source code, this step has to be repeated.

